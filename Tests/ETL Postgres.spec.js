const originalArgv = process.argv;
const config = require('./config.js');
const fs = require('fs');
const prepDB = require('./prepDB.js');
const etlPostgres = require('../ETL/postgres/etlPostgres.js');

describe('Postgres ETL', () => {
  let client;
  beforeAll(async function () {
    client = await prepDB();
  });
  beforeEach(async function () {
    await client.query('drop table if exists test');
    await client.query(`create table test(
      id int generated by default as identity,
      product_id int,
      body varchar(1000),
      written date,
      asker_name varchar(60),
      reported int,
      helpful int,
      primary key(id)
    )`);
    if (fs.existsSync('test_errorLines.csv')) {
      console.log('deleting error file')
      fs.rmSync('./test_errorLines.csv');
    }
  });
  afterAll(async function () {
    process.argv = originalArgv;
    await client.end();
  });
  it('should load valid data into the database', async function () {
    //TODO: maybe just stub out parseArgs instead
    process.argv = [
      'fakepath',
      'fakepath2',
      '-U',
      config.user,
      '-p',
      config.password,
      '../../tests/dummy.csv',
      config.database,
      'test',
      '-map',
      'date_written=written,asker_email=__skip__',
    ];
    await etlPostgres();
    //check if database has the right number of entries
    const lineCount = await client.query('select count(*) from test');
    expect(lineCount.rows[0].count).toBe('518');

    //check a sample of the entries for specific column data
    const firstLine = await client.query('select * from test where id=1');
    expect(firstLine.rows[0]).toEqual({
      id: 1,
      product_id: 1,
      body: 'What fabric is the top made of?',
      //I guess the T05 is because of time zone stuff
      //not sure if that's a problem with the test or with the ETL
      written: new Date('2018-01-04T05:00:00.000Z'),
      asker_name: 'yankeelover',
      reported: 0,
      helpful: 1,
    });

    //check that there's no error file
    expect(fs.existsSync('test_errorLines.csv')).toEqual(false);
  });
  // it('should create a csv file with errored lines when lines cause errors', async function (done) {
  //   process.argv = [
  //     'fakepath',
  //     'fakepath2',
  //     '-U',
  //     config.user,
  //     '-p',
  //     config.password,
  //     '../../tests/dummy.csv',
  //     config.database,
  //     'test',
  //   ];
  //   await etlPostgres();

  //   done();
  // });
});
